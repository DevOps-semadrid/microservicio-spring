# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build jacocoTestReport'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
  displayName: 'Build Plugin'
  
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(Build.SourcesDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
    reportDirectory: '$(Build.SourcesDirectory)/build/reports/jacoco/test/html'
- task: BuildQualityChecks@8
  inputs:
    checkWarnings: true
    warningFailOption: 'build'
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'lines'
    coverageThreshold: '70'
    baseBranchRef: '$(System.PullRequest.TargetBranch)'
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
        **/build/libs/*.jar
        **/build/**/*.xml
        **/build/**/*.html
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: appJar
    publishLocation: 'Container'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonarCloud'
    organization: 'devops-semadrid'
    projectKey: 'DevOps-semadrid_microservicio-spring'
    projectName: 'microservicio-spring'
  displayName: 'Prepare SonarCloud'
  
- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'sonarqube'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: true
    sqGradlePluginVersionChoice: 'specify'
    sonarQubeGradlePluginVersion: '3.3'
    spotBugsAnalysis: false
  displayName: SonarCloud Analysis